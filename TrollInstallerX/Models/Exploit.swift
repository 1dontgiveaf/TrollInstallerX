//
//  Exploit.swift
//  TrollInstallerX
//
//  Created by Alfie on 22/03/2024.
//

import Foundation

enum ExploitType {
    case kernel
    case ppl
    case cow
}

struct ExploitVersion {
    let minimumVersion: Version
    let maximumVersion: Version
}

struct Exploit {
    let name: String
    let type: ExploitType
    
    let supported: [ExploitVersion]
    
    let initialise: (@convention(c) () -> Bool)?
    let deinitialise: (@convention(c) () -> Bool)?
    
    let unsandbox: (@convention(c) () -> Bool)?
    
    let overwrite: (@convention(c) (_ file: String, _ data: Data) -> Bool)?
    
    init(name: String, type: ExploitType, supported: [ExploitVersion],
         initialise: (@convention(c) () -> Bool)? = nil,
         deinitialise: (@convention(c) () -> Bool)? = nil,
         unsandbox: (@convention(c) () -> Bool)? = nil,
         overwrite: (@convention(c) (_ file: String, _ data: Data) -> Bool)? = nil
    ) {
        self.name = name
        self.type = type
        self.supported = supported
        self.initialise = initialise
        self.deinitialise = deinitialise
        self.unsandbox = unsandbox
        self.overwrite = overwrite
        
    }
    
    func supports(_ device: Device) -> Bool {
        for versions in self.supported {
            if device.version >= versions.minimumVersion
                && device.version < versions.maximumVersion {
                return true
            }
        }
        return false
    }
}


/*
 Kernel exploits
 */

// physpuppet
let physpuppet = Exploit(
    name: "physpuppet",
    type: .kernel,
    supported: [
        ExploitVersion(minimumVersion: Version(major: 14, minor: 0), maximumVersion: Version(major: 16, minor: 3, patch: 1))
    ],
    initialise: krw_init_physpuppet,
    deinitialise: krw_deinit)

// smith
let smith = Exploit(
    name: "smith",
    type: .kernel,
    supported: [
        ExploitVersion(minimumVersion: Version(major: 16, minor: 0), maximumVersion: Version(major: 16, minor: 5, patch: 1))
    ],
    initialise: krw_init_smith,
    deinitialise: krw_deinit)

// landa
let landa = Exploit(
    name: "landa",
    type: .kernel,
    supported: [
        ExploitVersion(minimumVersion: Version(major: 14, minor: 0), maximumVersion: Version(major: 16, minor: 6, patch: 1))
    ],
    initialise: krw_init_landa,
    deinitialise: krw_deinit)


/*
 PPL bypass
 */

// dmaFail
let dmaFail = Exploit(
    name: "dmaFail",
    type: .ppl,
    supported: [
        ExploitVersion(minimumVersion: Version(major: 15, minor: 2), maximumVersion: Version(major: 16, minor: 5, patch: 1))
    ],
    initialise: PPLRW_init,
    deinitialise: PPLRW_deinit)

/*
 CoW exploit
 */

// MacDirtyCow
let MacDirtyCow = Exploit(
    name: "MacDirtyCow",
    type: .cow,
    supported: [
        ExploitVersion(minimumVersion: Version(major: 15, minor: 0),
                       maximumVersion: Version(major: 15, minor: 7, patch: 1)),
        ExploitVersion(minimumVersion: Version(major: 16, minor: 0),
                       maximumVersion: Version(major: 16, minor: 1, patch: 2))
    ],
    unsandbox: grant_full_disk_access,
    overwrite: overwriteFile)
